#!/usr/bin/env bash
#
# Copyright (c) 2014, Marco Elver
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the
#    distribution.
#
#  * Neither the name of the software nor the names of its contributors
#    may be used to endorse or promote products derived from this
#    software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

set -o errtrace
set -o errexit
set -o nounset

PROGNAME=cksumdb
BACKEND=file
DIGEST=sha256
readonly PROGNAME DIGEST

die() {
	printf -- "\e[1;31mERROR:\e[0m ""$@" 1>&2
	exit 1
}

msg() {
	printf -- "\e[1;32mINFO:\e[0m ""$@" 1>&2
}

warn() {
	printf -- "\e[1;33mWARN:\e[0m ""$@" 1>&2
}

trap_ERR() {
	local errcode="$1"
	local lineno="$2"
	local command="$3"
	shift 3
	local traceback=""

	[[ -n "$*" ]] && printf -v traceback "\n    => in %s" "$@"
	die "line %s - '%s' failed (code=%s)%s\n" "$lineno" "$command" "$errcode" "$traceback"
}
trap 'trap_ERR "$?" "$LINENO" "$BASH_COMMAND" "${FUNCNAME[@]:+${FUNCNAME[@]}}"' ERR

# Check if we have all non-standard dependencies:
type -p openssl &>/dev/null || die "No openssl!\n"

get_cksum() {
	local path="$1"
	local cksum="$(openssl dgst -$arg_digest < "$path")"
	printf "%s" "${cksum##* }"
}

get_mtime_size() {
	local path="$1"
	stat -c "%Y_%s" "$path"
}

db_init_file() {
	if [[ ! -d "$arg_dbpath" ]]; then
		[[ -e "$arg_dbpath" ]] && die "Invalid database!" || :
		[[ "$cmd" == "update" ]] || die "Database does not exist!\n"

		mkdir -p "$arg_dbpath"
		msg "Initialized database: %s\n" "$arg_dbpath"
	else
		msg "Using database: %s\n" "$arg_dbpath"
	fi

	if [[ "$cmd" == "update" ]]; then
		type -p rsync &>/dev/null || die "No rsync!\n"

		#rsync -rq --delete -f"+ */" -f"- *" "${arg_path}/" "${arg_dbpath}/" <-- does not remove empty dirs
		rsync -rq --max-size=0 --min-size=1 --delete "${arg_path}/" "${arg_dbpath}/"
	fi
}

db_get_file() {
	local path="$1"
	local attr="$2"
	local data
	local db_path="${arg_dbpath}/${path}"

	if [[ -f "$db_path" ]]; then
		data="$(< "$db_path")"
	else
		return 0
	fi

	case "$attr" in
		mtime_size)
			printf "%s" "${data% *}"
			;;
		cksum)
			printf "%s" "${data#* }"
			;;
		*)
			die "Invalid attribute: %s\n" "$attr"
			;;
	esac
}

db_set_file() {
	local path="$1"
	local mtime_size="$2"
	local cksum="$3"
	local db_path="${arg_dbpath}/${path}"

	if [[ ! -d "${db_path%/*}" ]]; then
		die "Cannot set entry for: %s\n" "$path"
	fi

	printf "%s %s" "$mtime_size" "$cksum" > "$db_path" \
		|| die "Cannot write to: %s\n" "$db_path"
}

db_init_xattr() {
	if ! type -p setfattr &>/dev/null || ! type -p setfattr &>/dev/null; then
		die "No setfattr/getfattr!"
	fi
}

db_get_xattr() {
	local path="$1"
	local attr="$2"
	local data
	local full_path="${arg_path}/${path}"

	case "$attr" in
		mtime_size|cksum)
			getfattr --only-values -n "user.${PROGNAME}.${attr}" "$full_path" 2>/dev/null || :
			;;
		*)
			die "Invalid attribute: %s\n" "$attr"
			;;
	esac
}

db_set_xattr() {
	local path="$1"
	local mtime_size="$2"
	local cksum="$3"
	local full_path="${arg_path}/${path}"

	if     ! setfattr -n "user.${PROGNAME}.mtime_size" -v "$mtime_size" "$full_path" \
		|| ! setfattr -n "user.${PROGNAME}.cksum"      -v "$cksum"      "$full_path"
	then
		die "Cannot set xattr: %s\n" "$path"
	fi
}

db_init() {
	case "$arg_backend" in
		file)
			db_init_file
			db_get() { db_get_file "$@"; }
			db_set() { db_set_file "$@"; }
			;;
		xattr)
			db_init_xattr
			db_get() { db_get_xattr "$@"; }
			db_set() { db_set_xattr "$@"; }
			;;
		*)
			die "Unknown database backend: %s\n" "$arg_backend"
			;;
	esac
}

refresh_pids() {
	local pid_count="${#pids[@]}"
	(( pid_count < ${arg_parallel[0]} )) && return 0 || :

	local _pids=("${pids[@]}")

	local stalled=0
	while :; do
		pids=()
		for pid in "${_pids[@]}"; do
			if kill -0 "$pid" &>/dev/null; then
				pids+=($pid)
			fi
		done

		if (( ${#pids[@]} < ${arg_parallel[0]} )); then
			break
		elif (( stalled > 5 )); then
			sleep 0.01
		else
			(( ++stalled )) || :
		fi
	done
}

barrier_pids() {
	local all_done=0
	while (( ! all_done )); do
		all_done=1
		for pid in "${pids[@]:+${pids[@]}}"; do
			if kill -0 "$pid" &>/dev/null; then
				all_done=0
				break
			fi
		done
		(( all_done )) || sleep 0.5
	done
}

spawn_tasks() {
	local fn="$1"
	local path_jobs=()
	local jobs_per_task=${arg_parallel[1]}
	local path
	while (( jobs_per_task-- )); do
		read path || break
		path_jobs+=("$path")
	done
	(
		for path in "${path_jobs[@]:+${path_jobs[@]}}"; do
			$fn "$path"
		done
	) &
	pids+=($!)
	(( ${#path_jobs[@]} < ${arg_parallel[1]} )) && return 1 || :
}

update() {
	local path="$1"
	[[ -r "${arg_path}/${path}" ]] || die "Cannot read: %s\n" "$path"

	local f_mtime_size="$(get_mtime_size "${arg_path}/${path}")"
	local db_mtime_size="$(db_get "$path" mtime_size)"

	[[ "$f_mtime_size" == "$db_mtime_size" ]] && return 0 || :

	local f_cksum="$(get_cksum "${arg_path}/${path}")"
	if db_set "$path" "$f_mtime_size" "$f_cksum"; then
		printf "updated: %s\n" "$path"
	else
		die "Failed to update: %s\n" "$path"
	fi

	return 0
}

cmd_update() {
	msg "Updating: %s\n" "$arg_path"
	db_init

	find "$arg_path" -xdev -type f -printf "%P\n" |
	(
		pids=()
		while :; do
			if (( ${arg_parallel[0]} )); then
				spawn_tasks update || break
				refresh_pids
			else
				read path || break
				update "$path"
			fi
		done
		barrier_pids
	) || exit $?
}

verify() {
	local path="$1"
	[[ -r "${arg_path}/${path}" ]] || die "Cannot read: %s\n" "$path"

	local f_mtime_size="$(get_mtime_size "${arg_path}/${path}")"
	local db_mtime_size="$(db_get "$path" mtime_size)"

	if [[ -z "$db_mtime_size" ]]; then
		warn "unknown: %s\n" "$path"
		return 0
	elif [[ "$f_mtime_size" != "$db_mtime_size" ]]; then
		warn "modified: %s\n" "$path"
		return 0
	fi

	local f_cksum="$(get_cksum "${arg_path}/${path}")"
	local db_cksum="$(db_get "$path" cksum)"

	if [[ "$f_cksum" != "$db_cksum" ]]; then
		local corruptmsg
		(( arg_all )) && corruptmsg=warn || corruptmsg=die
		$corruptmsg "corrupt: %s [%s != %s]\n" "$path" "$f_cksum" "$db_cksum"
	else
		printf "ok: %s\n" "$path"
	fi

	return 0
}

cmd_verify() {
	msg "Verifying: %s\n" "$arg_path"
	db_init

	find "$arg_path" -xdev -type f -printf "%P\n" |
	(
		pids=()
		while :; do
			if (( ${arg_parallel[0]} )); then
				spawn_tasks verify || break
				refresh_pids
			else
				read path || break
				verify "$path"
			fi
		done
		barrier_pids
	) || exit $?
}

##
# PARSE OPTIONS
#
prog_usage() {
	printf -- "\
Usage: %s [<options>] <command> <path>...

Commands available:
    update    Update checksum database, reporting changed files.
    verify    Verify files from database.

Options:
    --all
        If we encounter a corruption during verify, continue.
    --backend
        Select database backend. Default: $BACKEND
        Available backends: file, xattr
    --dbprefix
        Specify a database path prefix.
    --digest
        Specify hash digest method. Default: $DIGEST
    --parallel
        Specify number of parallel verify/update tasks. Format: <tasks>[,<jobs-per-task>]. Implies --all.
" "$PROGNAME"
	exit 42
}

arg_all=0
arg_backend="$BACKEND"
arg_dbprefix=
arg_digest="$DIGEST"
arg_parallel=(0)

while :; do
	case "${1:-}" in
		--all)
			arg_all=1
			;;
		--backend)
			[[ -n "${2:-}" ]] || prog_usage
			arg_backend="$2"
			shift
			;;
		--dbprefix)
			[[ -n "${2:-}" ]] || prog_usage
			arg_dbprefix="$2"
			shift
			;;
		--digest)
			[[ -n "${2:-}" ]] || prog_usage
			arg_digest="$2"
			shift
			;;
		--parallel)
			[[ -n "${2:-}" ]] || prog_usage
			IFS=, read -ra arg_parallel <<< "$2"
			if (( ${#arg_parallel[@]} == 1 )); then
				arg_parallel+=(8)
			fi
			arg_all=1
			shift
			;;
		-*) prog_usage ;;
		*) break;;
	esac
	shift
done

cmd="${1:-}"
shift || :

trap 'msg "User aborted!\n"; exit 42' INT

start_time="$(date +"%s")"
case "${cmd}" in
	update|verify)
		(( ! $# )) && prog_usage || :

		for arg_path in "$@"; do
			if [[ ! -d "$arg_path" ]]; then
				die "Not a valid directory: %s\n" "$arg_path"
			fi

			arg_path="$(cd "$arg_path" && pwd)"
			arg_dbpath="${arg_dbprefix%/}${arg_path%/*}/.${arg_path##*/}-${PROGNAME}.${arg_backend}"
			cmd_${cmd}
		done
		;;
	*)
		prog_usage
		;;
esac

total_time=$(( $(date +"%s") - start_time ))
msg "Elapsed time: %.2d:%.2d\n" "$(( total_time / 60 ))" "$(( total_time % 60 ))"

exit 0
